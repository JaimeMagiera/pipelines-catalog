apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-dotnet-1-pr
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.11.3"
    tekton.dev/tags: s2i, dotnet
    tekton.dev/displayName: "s2i dotnet 1 pipelineresource"
spec:
  description: >-
    s2i-dotnet-1-pr task fetches a Git repository and builds and
    pushes a container image using S2I and a .NET Core 1 builder image.

  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  params:
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.17.0
    - name: MINOR_VERSION
      description: The minor version of the .NET Core 1
      default: '1'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingDir: $(resources.inputs.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'registry.access.redhat.com/dotnet/dotnetcore-1$(params.MINOR_VERSION)-rhel7', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(resources.outputs.image.url)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: $(params.BUILDER_IMAGE)
      workingDir: $(resources.inputs.source.path)
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--digestfile=$(resources.inputs.source.path)/image-digest', '$(resources.outputs.image.url)', 'docker://$(resources.outputs.image.url)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: digest-to-results
      image: $(params.BUILDER_IMAGE)
      script: cat $(resources.inputs.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
