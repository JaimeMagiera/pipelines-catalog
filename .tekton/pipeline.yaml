---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-dotnet
  labels:
    app.kubernetes.io/version: "1.4.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, dotnet, workspace
    tekton.dev/displayName: "s2i dotnet"
spec:
  description: >-
    s2i-dotnet task fetches a Git repository and builds and
    pushes a container image using S2I and a .NET Core builder image.

  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  params:
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.17.0
    - name: VERSION
      description: The tag of .NET imagestream for .NET version
      default: '3.1-ubi8'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/dotnet:$(params.VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      workingDir: $(workspaces.source.path)
      image: $(params.BUILDER_IMAGE)
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--digestfile=$(workspaces.source.path)/image-digest', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: digest-to-results
      image: $(params.BUILDER_IMAGE)
      script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-dotnet-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-go
  labels:
    app.kubernetes.io/version: "1.4.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, go, workspace
    tekton.dev/displayName: "s2i go"
spec:
  description: >-
    s2i-go task clones a Git repository and builds and
    pushes a container image using S2I and a Go builder image.

  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  params:
    - name: VERSION
      description: The tag of go imagestream for go version
      default: '1.14.7-ubi8'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.17.0
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/golang:$(params.VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      workingDir: $(workspaces.source.path)
      image: $(params.BUILDER_IMAGE)
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--digestfile=$(workspaces.source.path)/image-digest', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: digest-to-results
      image: $(params.BUILDER_IMAGE)
      script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-go-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-java
  labels:
    app.kubernetes.io/version: "1.4.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, java, workspace
    tekton.dev/displayName: "s2i java"
spec:
  description: >-
    s2i-java task clones a Git repository and builds and
    pushes a container image using S2I and a Java builder image.

  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  params:
    - name: VERSION
      description: The tag of java imagestream for java version
      default: 'openjdk-11-ubi8'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: MAVEN_ARGS_APPEND
      description: Additional Maven arguments
      default: ""
      type: string
    - name: MAVEN_CLEAR_REPO
      description: Remove the Maven repository after the artifact is built
      default: "false"
      type: string
    - name: MAVEN_MIRROR_URL
      description: The base URL of a mirror used for retrieving artifacts
      default: ""
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.17.0
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: gen-env-file
      image: quay.io/openshift-pipeline/s2i
      workingdir: /env-params
      command:
        - '/bin/sh'
        - '-c'
      args:
        - |-
          echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

          [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
            echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

          [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
            echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      volumeMounts:
        - name: envparams
          mountPath: /env-params
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command:
        - 's2i'
        - 'build'
        - '$(params.PATH_CONTEXT)'
        - 'image-registry.openshift-image-registry.svc:5000/openshift/java:$(params.VERSION)'
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - '/gen-source/Dockerfile.gen'
        - '--environment-file'
        - '/env-params/env-file'
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
        - name: envparams
          mountPath: /env-params
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--digestfile=$(workspaces.source.path)/image-digest', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: digest-to-results
      image: $(params.BUILDER_IMAGE)
      script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
    - name: envparams
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-java-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-nodejs
  labels:
    app.kubernetes.io/version: "1.4.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, nodejs, workspace
    tekton.dev/displayName: "s2i nodejs"
spec:
  description: >-
    s2i-nodejs task clones a Git repository and builds and
    pushes a container image using S2I and a nodejs builder image.

  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  params:
    - name: VERSION
      description: The tag of nodejs imagestream for nodejs version
      default: '14-ubi8'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.17.0
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/nodejs:$(params.VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--digestfile=$(workspaces.source.path)/image-digest', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: digest-to-results
      image: $(params.BUILDER_IMAGE)
      script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-nodejs-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-php
  labels:
    app.kubernetes.io/version: "1.4.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, php, workspace
    tekton.dev/displayName: "s2i php"
spec:
  description: >-
    s2i-php task clones a Git repository and builds and
    pushes a container image using S2I and a PHP builder image.

  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  params:
    - name: VERSION
      description: The tag of php imagestream for php version
      default: '7.4-ubi8'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.17.0
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/php:$(params.VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: $(params.BUILDER_IMAGE)
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--digestfile=$(workspaces.source.path)/image-digest', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: digest-to-results
      image: $(params.BUILDER_IMAGE)
      script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-php-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-python
  labels:
    app.kubernetes.io/version: "1.4.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, python, workspace
    tekton.dev/displayName: "s2i python"
spec:
  description: >-
    s2i-python task clones a Git repository and builds and
    pushes a container image using S2I and a Python builder image.

  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  params:
    - name: VERSION
      description: The tag of python imagestream for python version
      default: '3.8-ubi8'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.17.0
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/python:$(params.VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push

      workingDir: $(workspaces.source.path)
      image: $(params.BUILDER_IMAGE)
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--digestfile=$(workspaces.source.path)/image-digest', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: digest-to-results
      image: $(params.BUILDER_IMAGE)
      script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-python-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-ruby
  labels:
    app.kubernetes.io/version: "1.4.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, ruby, workspace
    tekton.dev/displayName: "s2i ruby"
spec:
  description: >-
    s2i-ruby task clones a Git repository and builds and
    pushes a container image using S2I and a Ruby builder image.

  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  params:
    - name: VERSION
      description: The tag of ruby imagestream for ruby version
      default: '2.7-ubi8'
      type: string
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.17.0
  workspaces:
    - name: source
      mountPath: /workspace/source
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i
      workingdir: $(workspaces.source.path)
      command: ['s2i', 'build', '$(params.PATH_CONTEXT)', 'image-registry.openshift-image-registry.svc:5000/openshift/ruby:$(params.VERSION)', '--as-dockerfile', '/gen-source/Dockerfile.gen']
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingdir: /gen-source
      command: ['buildah', 'bud', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--layers', '-f', '/gen-source/Dockerfile.gen', '-t', '$(params.IMAGE)', '.']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
    - name: push
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      command: ['buildah', 'push', '--storage-driver=vfs', '--tls-verify=$(params.TLSVERIFY)', '--digestfile=$(workspaces.source.path)/image-digest', '$(params.IMAGE)', 'docker://$(params.IMAGE)']
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
    - name: digest-to-results
      image: $(params.BUILDER_IMAGE)
      script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: gen-source
      emptyDir: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: s2i-ruby-workspace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipelines-catalog
spec:
  params:
    - name: repo_url
    - name: revision
  workspaces:
    - name: source
    - name: s2i-dotnet-workspace
    - name: s2i-go-workspace
    - name: s2i-java-workspace
    - name: s2i-nodejs-workspace
    - name: s2i-php-workspace
    - name: s2i-python-workspace
    - name: s2i-ruby-workspace

  tasks:

    - name: fetch
      taskRef:
        name: git-clone
      params:
        - name: url
          value: $(params.repo_url)
        - name: revision
          value: $(params.revision)
      workspaces:
        - name: output
          workspace: source

    - name: yaml-lint
      runAfter: [fetch]
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: yaml-lint
            # we get bumped out when using hte official image with docker.io
            # ratelimit so workaround this.
            image: registry.access.redhat.com/ubi8/python-38
            workingdir: $(workspaces.source.path)
            script: |
              pip install yamllint
              yamllint .tekton/ task/

    - name: kubectl-dry-run
      runAfter: [fetch]
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: kubectl-apply-check
            # TODO: find an UBI with kubectl
            image: quay.io/openshift/origin-cli:4.6
            workingdir: $(workspaces.source.path)
            script: |
              for i in task/*/*/;do kubectl apply -f ${i} --dry-run=client;done
      workspaces:
        - name: source
          workspace: source

    - name: check-generated-yaml
      runAfter: [fetch]
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: check-generated-yaml
            workingdir: $(workspaces.source.path)
            image: registry.access.redhat.com/ubi8/python-38
            # For whatever reason, make check is not working, so let's do this with
            # git filename instead which should be as a robust check and we don't
            # have to care having to maintain a dockerfile for it.
            script: |
              #!/usr/bin/env bash
              set -exu
              CHANGED_FILES=($(git log HEAD --pretty="format:" --name-only  -1))
              needregen=
              for yaml in ${CHANGED_FILES[*]};do
                  [[ ${yaml} == .tekton/pipeline.yaml ]] && { exit 0 ;}
                  [[ ${yaml} == task/*/*yaml || ${yaml} == openshift/gen/*yaml ]] && needregen=1
              done
              [[ -n ${needregen} ]] && {
                  echo "There was some yaml modifications but pipeline.yaml wasn't generated"
                  echo "Rerun make generated"
                  exit  1
              }

    - name: prestep
      runAfter: [kubectl-dry-run, yaml-lint, check-generated-yaml]
      taskSpec:
        steps:
          - name: prestep-mind-the-gap
            image: registry.access.redhat.com/ubi8/ubi-minimal:8.2
            script: |
              echo "OK: pre-step has passed"


    - name: fetch-repository-s2i-dotnet
      params:
      - name: url
        value: https://github.com/redhat-developer/s2i-dotnetcore-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: dotnetcore-3.1
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-dotnet-workspace
    - name: s2i-dotnet-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: PATH_CONTEXT
        value: app
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-dotnet
      runAfter:
      - fetch-repository-s2i-dotnet
      taskRef:
        name: s2i-dotnet
      workspaces:
      - name: source
        workspace: s2i-dotnet-workspace

    - name: fetch-repository-s2i-go
      params:
      - name: url
        value: https://github.com/sclorg/golang-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-go-workspace
    - name: s2i-go-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-go
      runAfter:
      - fetch-repository-s2i-go
      taskRef:
        name: s2i-go
      workspaces:
      - name: source
        workspace: s2i-go-workspace

    - name: fetch-repository-s2i-java
      params:
      - name: url
        value: https://github.com/piyush-garg/spring-petclinic
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: main
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-java-workspace
    - name: s2i-java-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-java
      runAfter:
      - fetch-repository-s2i-java
      taskRef:
        name: s2i-java
      workspaces:
      - name: source
        workspace: s2i-java-workspace

    - name: fetch-repository-s2i-nodejs
      params:
      - name: url
        value: https://github.com/sclorg/nodejs-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-nodejs-workspace
    - name: s2i-nodejs-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-nodejs
      runAfter:
      - fetch-repository-s2i-nodejs
      taskRef:
        name: s2i-nodejs
      workspaces:
      - name: source
        workspace: s2i-nodejs-workspace

    - name: fetch-repository-s2i-php
      params:
      - name: url
        value: https://github.com/sclorg/s2i-php-container/
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-php-workspace
    - name: s2i-php-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: PATH_CONTEXT
        value: test/test-app
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-php
      runAfter:
      - fetch-repository-s2i-php
      taskRef:
        name: s2i-php
      workspaces:
      - name: source
        workspace: s2i-php-workspace

    - name: fetch-repository-s2i-python
      params:
      - name: url
        value: https://github.com/sclorg/django-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-python-workspace
    - name: s2i-python-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-python
      runAfter:
      - fetch-repository-s2i-python
      taskRef:
        name: s2i-python
      workspaces:
      - name: source
        workspace: s2i-python-workspace

    - name: fetch-repository-s2i-ruby
      params:
      - name: url
        value: https://github.com/sclorg/ruby-ex
      - name: subdirectory
        value: ''
      - name: deleteExisting
        value: 'true'
      - name: revision
        value: master
      runAfter:
      - prestep
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: s2i-ruby-workspace
    - name: s2i-ruby-test
      params:
      - name: TLSVERIFY
        value: 'false'
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/{{namespace}}/s2i-ruby
      runAfter:
      - fetch-repository-s2i-ruby
      taskRef:
        name: s2i-ruby
      workspaces:
      - name: source
        workspace: s2i-ruby-workspace

  finally:
    - name: finally
      taskSpec:
        steps:
          - name: send-to-slack
            env:
              - name: SLACK_WEBHOOK_URL
                valueFrom:
                  secretKeyRef:
                    name: slack-tektoncd-ci-webhook
                    key: hook_url
              - name: PIPELINERUN
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.labels['tekton.dev/pipelineRun']
              - name: GITHUB_PULL_LABEL
                value: "{{pull_request.labels}}"
              - name: LABEL_TO_CHECK
                value: "nightly-ci"
              - name: SUCCESS_URL_ICON
                value: "https://github.com/tektoncd.png"
              - name: FAILURE_URL_ICON
                value: "https://www.vhv.rs/dpng/d/415-4154815_grumpy-cat-png-photos-grumpy-cat-png-transparent.png"
              - name: SUCCESS_SUBJECT
                value: "Pipelines Catalog CI ran successfull on {{pull_request.html_url}} :pipelinedance: :dancing-penguin: :yay2:"
              - name: FAILURE_SUBJECT
                value: "Pipelines Catalog CI has failed on {{pull_request.html_url}} :fb-sad: :crying_cat_face: :crying:"
              - name: LOG_URL
                value: "{{openshift_console_pipelinerun_href}}"
              
            image: quay.io/chmouel/tekton-asa-code:latest
            command: ["/code/misc/send-slack-notifications.py"]
            
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: pipelines-catalog-run
spec:
  
  pipelineRef:
    name: pipelines-catalog
  params:
    - name: repo_url
      value: {{repo_url}}
    - name: revision
      value: {{revision}}
    
  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 500Mi

    - name: s2i-dotnet-workspace
      persistentvolumeclaim:
        claimName: s2i-dotnet-workspace
    - name: s2i-go-workspace
      persistentvolumeclaim:
        claimName: s2i-go-workspace
    - name: s2i-java-workspace
      persistentvolumeclaim:
        claimName: s2i-java-workspace
    - name: s2i-nodejs-workspace
      persistentvolumeclaim:
        claimName: s2i-nodejs-workspace
    - name: s2i-php-workspace
      persistentvolumeclaim:
        claimName: s2i-php-workspace
    - name: s2i-python-workspace
      persistentvolumeclaim:
        claimName: s2i-python-workspace
    - name: s2i-ruby-workspace
      persistentvolumeclaim:
        claimName: s2i-ruby-workspace
